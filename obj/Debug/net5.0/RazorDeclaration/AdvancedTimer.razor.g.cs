// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Majorsoft.Blazor.Components.Timer
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Csharp\Majorsoft Blazor Components\src\Majorsoft.Blazor.Components.Timer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web

#nullable disable
    ;
#nullable restore
#line 1 "D:\Csharp\Majorsoft Blazor Components\src\Majorsoft.Blazor.Components.Timer\AdvancedTimer.razor"
 using Microsoft.Extensions.Logging

#nullable disable
    ;
#nullable restore
#line 2 "D:\Csharp\Majorsoft Blazor Components\src\Majorsoft.Blazor.Components.Timer\AdvancedTimer.razor"
 using System.Timers

#line default
#line hidden
#nullable disable
    ;
    #nullable restore
    public partial class AdvancedTimer : global::Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    #nullable disable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 7 "D:\Csharp\Majorsoft Blazor Components\src\Majorsoft.Blazor.Components.Timer\AdvancedTimer.razor"
       
	protected override void OnInitialized()
	{
		if (DelayInMilisec > 0)
		{
			_timer = new Timer(DelayInMilisec);
			_timer.Elapsed += OnDelay;
			_timer.AutoReset = false;
		}
		else
		{
			_timer = new Timer(IntervalInMilisec);
			_timer.Elapsed += OnElapsed;
			_timer.AutoReset = Occurring.Count == 1 ? false : true;
		}

		if (AutoStart)
		{
			_timer.Start();
		}

		WriteDiag($"Initialized Timer with Interval: '{IntervalInMilisec}' ms. Delay before start: {DelayInMilisec} ms. Max occurring: {Occurring.Count}, AutoStart: {AutoStart}");
	}

	private double _intervalInMilisec = 200;
	/// <summary>
	/// Notification timeout in ms. If set to 0 or less it set to 1 ms.
	/// </summary>
	[Parameter]
	public double IntervalInMilisec
	{
		get => _intervalInMilisec;
		set
		{
			if (value == _intervalInMilisec)
			{
				return;
			}

			_intervalInMilisec = value > 0 ? value : 1;
			if (_timer is not null)
			{
				_timer.AutoReset = Occurring.Count == 1 ? false : true;
				_timer.Interval = _intervalInMilisec;
			}
		}
	}

	/// <summary>
	/// Delay in ms. before the timer will start. If set to 0 timer will start immediately.
	/// </summary>
	[Parameter] public double DelayInMilisec { get; set; } = 0;
	/// <summary>
	/// Number of times elapsed even will be fired. See <see cref="Times"/> record description.
	/// </summary>
	[Parameter] public Times Occurring { get; set; } = Times.Once();
	/// <summary>
	/// If true timer will start when component OnInitialized event run, otherwise timer must be started by IsEnabled property set to true.
	/// </summary>
	[Parameter] public bool AutoStart { get; set; } = true;

	/// <summary>
	/// Timer event this Function called when specified timeout elapsed, parameter is the iteration count.
	/// </summary>
	[Parameter] public EventCallback<ulong> OnIntervalElapsed { get; set; }

	private bool _disposedValue;
	private Timer? _timer;
	private ulong _eventCount = 0;

	/// <summary>
	/// Can be set to start `true` or stop `false` timer. Returns the inner state of the timer. `True` if timer is running otherwise `false`.
	/// </summary>
	[Parameter] public bool IsEnabled
	{
		get => _timer?.Enabled ?? false;
		set
		{
			if (value == _timer?.Enabled)
				return;

			if (value)
				Start();
			else
				Stop();
		}
	}

	/// <summary>
	/// Starts the internal timer which will start after the set delay and fire event for the given occurrence times.
	/// </summary>
	[Obsolete("Method is obsolete will be removed! Please use public Blazor parameter: bool IsEnabled instead of public methods.")]
	public void Start()
	{
		WriteDiag("Timer started.");
		_timer?.Start();
	}
	/// <summary>
	/// Stops the internal timer and no more event will be fired.
	/// </summary>
	[Obsolete("Method is obsolete will be removed! Please use public Blazor parameter: bool IsEnabled instead of public methods.")]
	public void Stop()
	{
		WriteDiag("Timer stopped.");
		_timer?.Stop();
	}
	/// <summary>
	/// Restarts the internal timer and resets the occurrence counter to 0. Events will be fired for the given occurrence times.
	/// </summary>
	public void Reset()
	{
		WriteDiag($"Resetting Timer with Interval: '{IntervalInMilisec}' ms. Max occurring: {Occurring.Count}");

		_timer?.Stop();
		_eventCount = 0;
		_timer?.Start();
	}

	private void OnDelay(object source, ElapsedEventArgs e)
	{
		WriteDiag($"Timer required Delay: {DelayInMilisec} ms elapsed. Stopping timer to switch event handler.");

		if (_timer is null)
			return;

		_timer.Stop();
		_timer.Elapsed -= OnDelay;
		_timer.Elapsed += OnElapsed;

		_timer.Interval = IntervalInMilisec;
		_timer.AutoReset = Occurring.Count == 1 ? false : true;

		_timer.Start();
	}
	private void OnElapsed(object source, ElapsedEventArgs e)
	{		
		if (_eventCount >= Occurring.Count)
		{
			_timer?.Stop();

			WriteDiag($"Timer triggered after: '{IntervalInMilisec}' ms. current occurrence: {_eventCount} reached the required occurrence: '{Occurring.Count}' Timer stopped.");
			return;
		}

		_eventCount++;
		WriteDiag($"Timer triggered after: '{IntervalInMilisec}' ms. current occurrence: '{_eventCount}', required occurrence: '{Occurring.Count}' AutoReset: '{_timer?.AutoReset}'. Invoke '{nameof(OnIntervalElapsed)}' event.");
		InvokeAsync(async () =>
		{
			await OnIntervalElapsed.InvokeAsync(_eventCount);
		});
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"{DateTime.Now.TimeOfDay} - Component {this.GetType()}: {message}");
	}

	protected virtual void Dispose(bool disposing)
	{
		if (!_disposedValue)
		{
			if (disposing && _timer is not null)
			{
				_timer.Elapsed -= OnElapsed;
				_timer.Dispose();
			}

			_disposedValue = true;
		}
	}

	/// <summary>
	/// Dispose component
	/// </summary>
	public void Dispose()
	{
		// Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
		Dispose(disposing: true);
		GC.SuppressFinalize(this);
	}

#line default
#line hidden
#nullable disable

        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 5 "D:\Csharp\Majorsoft Blazor Components\src\Majorsoft.Blazor.Components.Timer\AdvancedTimer.razor"
        ILogger<AdvancedTimer>

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 5 "D:\Csharp\Majorsoft Blazor Components\src\Majorsoft.Blazor.Components.Timer\AdvancedTimer.razor"
                               _logger

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
    }
}
#pragma warning restore 1591
